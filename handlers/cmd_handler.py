import pandas as pd
from aiogram import Router
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message


from keyboards.pair_keyboard import make_pairs_buttons, make_order_buttons
from bybit_api_user import get_pairs, pair_order, monitor_and_closing
from state.form_states import Form

cmd_router = Router()
user_orders = {}

@cmd_router.message(CommandStart())
async def cmd_start(message: Message):
    s = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏.\n\n" \
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n" \
        "\t - üìà –£–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏ –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT).\n" \
        "\t - üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É.\n" \
        "\t - üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 0,1%.\n" \
        "\t - üîî –£–≤–µ–¥–æ–º–∏—Ç—å –≤–∞—Å –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.\n\n" \
        "\t –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    await message.answer(s)

@cmd_router.message(Command('help'))
async def cmd_help(message: Message):
    s = "\t ‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n\n" \
        "\t /price ‚Äî –£–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ.\n" \
        "\t /order ‚Äî –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞—Ä—É.\n" \
        "\t /close_position ‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 0,1% –ø—Ä–∏–±—ã–ª–∏.\n" \
        "\t /cancel ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è.\n\n" \
        "\t –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
    await message.answer(s)

@cmd_router.message(Command('cancel'))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")


@cmd_router.message(Command('price'))
async def cmd_price(message: Message, state: FSMContext):
    await state.set_state(Form.pair_choice)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –ø–∞—Ä:", reply_markup=make_pairs_buttons())


@cmd_router.message(StateFilter(Form.pair_choice))
async def send_information(message: Message, state: FSMContext):
    await state.set_state(Form.pair_choice)
    text = message.text.strip()
    print(text)

    pairs = get_pairs(text)

    if isinstance(pairs, pd.DataFrame):
        response_dict = pairs.to_dict(orient='records')[0]
        response_text = "\n".join([f"{key}: {value}" for key, value in response_dict.items()])
    else:
        response_text = pairs

    await message.reply(response_text)
    await state.clear()


@cmd_router.message(Command('order'))
async def take_order(message: Message, state: FSMContext):
    await state.set_state(Form.order_type)
    s = "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
    s += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö:"
    await message.answer(s, reply_markup=make_order_buttons())


@cmd_router.message(StateFilter(Form.order_type))
async def take_order_type(message: Message, state: FSMContext):
    global order_type
    order_type = message.text.strip()
    await state.set_state(Form.order_pair)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=make_pairs_buttons())



@cmd_router.message(StateFilter(Form.order_pair))
async def take_pairs(message: Message, state: FSMContext):
    global pairs
    pairs = message.text.strip()
    await state.set_state(Form.order_price)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:")


@cmd_router.message(StateFilter(Form.order_price))
async def verify_order(message: Message, state: FSMContext):
    try:
        price = float(message.text.strip())
        order = pair_order(order_type, pairs, price)
        if isinstance(order, str):
            await message.reply(order)
        else:
            await message.reply(f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: {order}")

    except ValueError:
        await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@cmd_router.message(Command('close_position'))
async def close_position_pairs(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_orders or not user_orders[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.")
        return

    await state.set_state(Form.close_position)

    orders = user_orders[user_id]
    order_list = '\n'.join([f"{i+1}. {order}" for i, order in enumerate(orders)])
    await message.reply(f"–í–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞:\n{order_list}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")

@cmd_router.message(StateFilter(Form.close_position))
async def close_order(message: Message, state: FSMContext):
    try:
        order_number = int(message.text.strip()) - 1
        user_id = message.from_user.id

        if user_id not in user_orders or not user_orders[user_id]:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.")
            return

        orders = user_orders[user_id]

        if 0 <= order_number < len(orders):
            order_to_close = orders.pop(order_number)
            await message.reply(f"–ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞: {order_to_close}")
            monitor_and_closing(order_to_close)
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞.")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")